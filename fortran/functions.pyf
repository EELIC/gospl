python module _fortran

    interface

        module meshparams
            integer :: nlocal
            integer, allocatable,dimension(:,:) :: gnid
            integer, allocatable,dimension(:,:) :: fvnid
            integer, allocatable,dimension(:) :: fvnnb
            double precision, allocatable,dimension(:) :: gfvarea
            double precision, allocatable,dimension(:) :: fvarea
            double precision, allocatable,dimension(:,:) :: fvelgt
            double precision, allocatable,dimension(:,:) :: fvvdist
        end module meshparams

        subroutine euclid(p1,p2,norm)
            double precision dimension(3),intent(in) :: p1
            double precision dimension(3),intent(in) :: p2
            double precision intent(out) :: norm
        end subroutine euclid

        subroutine quicksort(array,first,last,indices)
            double precision dimension(:),intent(inout) :: array
            integer intent(in) :: first
            integer intent(in) :: last
            integer dimension(:),intent(inout) :: indices
        end subroutine quicksort

        subroutine split(array,low,high,mid,indices)
            double precision dimension(:),intent(inout) :: array
            integer intent(in) :: low
            integer intent(in) :: high
            integer intent(out) :: mid
            integer dimension(:),intent(inout) :: indices
        end subroutine split

        subroutine setmaxnb(nb,maxnb) ! in :_fortran:functions.f90
            use meshparams
            integer :: nb
            integer intent(out) :: maxnb
        end subroutine setmaxnb

        subroutine sethillslopecoeff(nb,kd,dcoeff)
            use meshparams
            integer :: nb
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb,9),intent(out),depend(nb) :: dcoeff
        end subroutine sethillslopecoeff

        subroutine seaparams(elev,sl,grp,pit,ins,out,vol,nb,nbg)
            double precision dimension(nb),intent(in) :: elev
            double precision,intent(in) :: sl
            integer dimension(nbg),intent(in) :: grp
            integer dimension(nb,2),intent(in),depend(nb) :: pit
            integer dimension(nb),intent(out),depend(nb) :: ins
            integer dimension(nbg),intent(out),depend(nbg) :: out
            double precision dimension(nbg),intent(out),depend(nbg) :: vol
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
            integer, optional,check(len(grp)>=nbg),depend(grp) :: nbg=len(grp)
        end subroutine seaparams

        subroutine distributeland(nrcv,sid,flux,rcv,wght,flx,nb)
            use meshparams
            integer :: nrcv
            integer dimension(nb),intent(in) :: sid
            double precision dimension(nb),intent(in),depend(nb) :: flux
            integer dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: wght
            double precision dimension(nb),intent(out),depend(nb) :: flx
            integer, optional,check(len(sid)>=nb),depend(sid) :: nb=len(sid)
        end subroutine distributeland

        subroutine distexcess(flux,elev,felev,pit,vol,ovol,sout,lins,flx,depo,nb,nbg,nbs)
            double precision dimension(nb),intent(in) :: flux
            double precision dimension(nb),intent(in),depend(nb) :: elev
            double precision dimension(nb),intent(in),depend(nb) :: felev
            integer dimension(nb,2),intent(in),depend(nb) :: pit
            double precision dimension(nbg),intent(in) :: vol
            double precision dimension(nbs),intent(in) :: ovol
            integer dimension(nbs),intent(in),depend(nbs) :: sout
            integer dimension(nb),intent(in),depend(nb) :: lins
            double precision dimension(nb),intent(out),depend(nb) :: flx
            double precision dimension(nb),intent(out),depend(nb) :: depo
            integer, optional,check(len(flux)>=nb),depend(flux) :: nb=len(flux)
            integer, optional,check(len(ovol)>=nbs),depend(ovol) :: nbs=len(ovol)
            integer, optional,check(len(vol)>=nbg),depend(vol) :: nbg=len(vol)
        end subroutine distexcess

        subroutine distsea(flux,elev,sl,grp,pit,vol,sout,flx,depo,ovol,nb,nbg)
            double precision dimension(nb),intent(in) :: flux
            double precision dimension(nb),intent(in),depend(nb) :: elev
            double precision,intent(in) :: sl
            integer dimension(nbg),intent(in) :: grp
            integer dimension(nb,2),intent(in),depend(nb) :: pit
            double precision dimension(nbg),intent(in),depend(nbg) :: vol
            integer dimension(nbg),intent(in),depend(nb) :: sout
            double precision dimension(nb),intent(out),depend(nb) :: flx
            double precision dimension(nb),intent(out),depend(nb) :: depo
            double precision dimension(nbg),intent(out),depend(nbg) :: ovol
            integer, optional,check(len(flux)>=nb),depend(flux) :: nb=len(flux)
            integer, optional,check(len(grp)>=nbg),depend(grp) :: nbg=len(grp)
        end subroutine distsea

        subroutine distland(flux,elev,felev,grp,pit,vol,flx,depo,nb,nbg)
            double precision dimension(nb),intent(in) :: flux
            double precision dimension(nb),intent(in),depend(nb) :: elev
            double precision dimension(nb),intent(in),depend(nb) :: felev
            integer dimension(nbg),intent(in) :: grp
            integer dimension(nb,2),intent(in),depend(nb) :: pit
            double precision dimension(nbg),intent(in),depend(nbg) :: vol
            double precision dimension(nb),intent(out),depend(nb) :: flx
            double precision dimension(nb),intent(out),depend(nb) :: depo
            integer, optional,check(len(flux)>=nb),depend(flux) :: nb=len(flux)
            integer, optional,check(len(grp)>=nbg),depend(grp) :: nbg=len(grp)
        end subroutine distland

        subroutine distocean(nrcv,sid,flux,rcv,wght,area,depth,dep,nb,nbi)
            use meshparams
            integer :: nrcv
            integer dimension(nbi),intent(in) :: sid
            double precision dimension(nb),intent(in) :: flux
            integer dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: wght
            double precision dimension(nb),intent(in),depend(nb) :: area
            double precision dimension(nb),intent(in),depend(nb) :: depth
            double precision dimension(nb),intent(out),depend(nb) :: dep
            integer, optional,check(len(sid)>=nbi),depend(sid) :: nbi=len(sid)
            integer, optional,check(len(flux)>=nb),depend(flux) :: nb=len(flux)
        end subroutine distocean

        subroutine mfdrcvs(nrcv,exp,inids,elev,sl,rcv,wgt,nb)
            use meshparams
            integer intent(in) :: nrcv
            double precision intent(in) :: exp
            double precision intent(in) :: sl
            integer dimension(nb),intent(in) :: inids
            double precision dimension(nb),intent(in),depend(nb) :: elev
            integer dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: wgt
            integer, optional,check(len(inids)>=nb),depend(inids) :: nb=len(inids)
        end subroutine mfdrcvs

        subroutine mfdreceivers(nrcv,exp, inids,elev,sl,rcv,dist,wgt,nb)
            use meshparams
            integer intent(in) :: nrcv
            double precision intent(in) :: exp
            double precision intent(in) :: sl
            integer dimension(nb),intent(in) :: inids
            double precision dimension(nb),intent(in),depend(nb) :: elev
            integer dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: dist
            double precision dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: wgt
            integer, optional,check(len(inids)>=nb),depend(inids) :: nb=len(inids)
        end subroutine mfdreceivers

        subroutine stratasimple(nb,stratnb,ids,weights,strath,stratz,phis,nstrath,nstratz,nphis)
            integer intent(in) :: nb
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in),depend(nb) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: strath
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratz
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
        end subroutine stratasimple

        subroutine stratabuild(nb,stratnb,ids,weights,strath,stratz,stratf,stratw,phis,phif,phiw,nstrath,nstratz,nstratf,nstratw,nphis,nphif,nphiw)
            integer intent(in) :: nb
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in),depend(nb) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: strath
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratz
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratf
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratw
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phif
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phiw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratf
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphif
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphiw
        end subroutine stratabuild

        subroutine stratabuildcarb(nb,stratnb,ids,weights,strath,stratz,stratf,stratw,stratc,phis,phif,phiw,phic,nstrath,nstratz,nstratf,nstratw,nstratc,nphis,nphif,nphiw,nphic)
            integer intent(in) :: nb
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in),depend(nb) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: strath
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratz
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratf
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratw
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratc
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phif
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phiw
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phic
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratf
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratc
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphif
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphiw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphic
        end subroutine stratabuildcarb

        subroutine label_pits(elev,fill,labels,pitnbs,nb)
            use meshparams
            double precision dimension(nb),intent(in) :: elev
            double precision dimension(nb),intent(in),depend(nb) :: fill
            integer dimension(nb),intent(out),depend(nb) :: labels
            integer intent(out) :: pitnbs
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine label_pits

        subroutine fill_tile(edge,elev,inids,fillz,labels,graphnb,m,nb)
            use meshparams
            integer dimension(m,2),intent(in) :: edge
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb),intent(in),depend(nb) :: inids
            double precision dimension(nb),intent(out),depend(nb) :: fillz
            integer dimension(nb),intent(out),depend(nb) :: labels
            integer intent(out) :: graphnb
            integer, optional,check(shape(edge,0)==m),depend(edge) :: m=shape(edge,0)
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine fill_tile

        subroutine pit_nodes(pitnb,pitarray)
            use meshparams
            integer intent(in) :: pitnb
            integer dimension(pitnb,2),intent(out),depend(pitnb) :: pitarray
        end subroutine pit_nodes

        subroutine graph_nodes(graphnb,newwgraph)
            use meshparams
            integer intent(in) :: graphnb
            double precision dimension(graphnb,4),intent(out),depend(graphnb) :: newwgraph
        end subroutine graph_nodes

        subroutine spill_pts(nb,pitids,pitval,elev,borders,inids,spill,n,m)
            use meshparams
            integer intent(in) :: nb
            integer dimension(n),intent(in) :: pitids
            integer dimension(n),intent(in),depend(n) :: pitval
            double precision dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: borders
            integer dimension(m),intent(in),depend(m) :: inids
            integer dimension(nb),intent(out),depend(nb) :: spill
            integer, optional,check(len(pitids)>=n),depend(pitids) :: n=len(pitids)
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
        end subroutine spill_pts

        subroutine fill_edges(nb,cgraph,maxnghbs,nelev,spillrank,spillnodes,spillid,m)
            use meshparams
            integer intent(in) :: nb
            double precision dimension(m,5),intent(in) :: cgraph
            integer intent(in) :: maxnghbs
            integer dimension(nb),intent(out),depend(nb) :: spillrank
            integer dimension(nb),intent(out),depend(nb) :: spillnodes
            integer dimension(nb),intent(out),depend(nb) :: spillid
            double precision dimension(nb),intent(out),depend(nb) :: nelev
            integer, optional,check(shape(cgraph,0)==m),depend(cgraph) :: m=shape(cgraph,0)
        end subroutine fill_edges

        subroutine fill_depressions(dem,fillp,wsh,ggraph,elev,m,nb)
            double precision dimension(m),intent(in) :: dem
            double precision dimension(m),intent(in),depend(m) :: fillp
            integer dimension(m),intent(in),depend(m) :: wsh
            double precision dimension(nb),intent(in) :: ggraph
            double precision dimension(m),intent(out),depend(m) :: elev
            integer, optional,check(len(dem)>=m),depend(dem) :: m=len(dem)
            integer, optional,check(len(ggraph)>=nb),depend(ggraph) :: nb=len(ggraph)
        end subroutine fill_depressions

        subroutine combine_edges(elev,labels,ins,outs,newgraph,graphnb,m,n)
            use meshparams
            double precision dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: labels
            integer dimension(n),intent(in) :: ins
            integer dimension(m),intent(in),depend(m) :: outs
            double precision dimension(n*8,4),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
            integer, optional,check(len(ins)>=n),depend(ins) :: n=len(ins)
        end subroutine combine_edges

        subroutine fillpit(sl,elev,hmax,fillz,pits,nb)
            use meshparams
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            double precision intent(in) :: hmax
            double precision dimension(nb),intent(out) :: fillz
            integer dimension(nb,2),intent(out) :: pits
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine fillpit

        subroutine ngbglob(nb,ngbid)
            use meshparams
            integer intent(in) :: nb
            integer dimension(nb,8),intent(in),depend(nb) :: ngbid
        end subroutine ngbglob

        subroutine definetin(nloc,coords,lgids,cells_nodes,cells_edges,edges_nodes,area,circumcenter,ngbid,edgemax,n,nb,m)
            use meshparams
            integer intent(in) :: nloc
            double precision dimension(nb,3),intent(in) :: coords
            integer dimension(nb),intent(in) :: lgids
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(n,3),intent(in),depend(n) :: cells_edges
            integer dimension(m,2),intent(in) :: edges_nodes
            double precision dimension(nb),intent(in),depend(nb) :: area
            double precision dimension(3,n),intent(in),depend(n) :: circumcenter
            integer dimension(nloc,8),intent(out),depend(nloc) :: ngbid
            double precision intent(out) :: edgemax
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(coords,0)==nb),depend(coords) :: nb=shape(coords,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definetin

        subroutine definegtin(nb,cells_nodes,edges_nodes,ngbnb,ngbid,n,m)
            use meshparams
            integer intent(in) :: nb
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(m,2),intent(in) :: edges_nodes
            integer dimension(nb),intent(out),depend(nb) :: ngbnb
            integer dimension(nb,12),intent(out),depend(nb) :: ngbid
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definegtin

    end interface

end python module _fortran
